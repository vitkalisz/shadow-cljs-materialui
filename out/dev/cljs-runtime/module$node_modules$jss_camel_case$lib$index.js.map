{
"version":3,
"file":"module$node_modules$jss_camel_case$lib$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAoB9HC,QAASA,YAAW,CAACC,KAAD,CAAQ,CAC1B,IAAIC,UAAY,EAAhB,CAESC,IAAT,KAASA,IAAT,GAAiBF,MAAjB,CACEC,SAAA,CAAU,CAAC,CAAA,CAAGE,oBAAA,CAAqB,SAArB,CAAJ,EAAqCD,IAArC,CAAV,CAAA,CAAwDF,KAAA,CAAME,IAAN,CAGtDF,MAAAI,UAAJ,GACMC,KAAAC,QAAA,CAAcN,KAAAI,UAAd,CAAJ,CAAoCH,SAAAG,UAApC,CAA0DJ,KAAAI,UAAAG,IAAA,CAAoBR,WAApB,CAA1D,CAAgGE,SAAAG,UAAhG,CAAsHL,WAAA,CAAYC,KAAAI,UAAZ,CADxH,CAIA,OAAOH,UAXmB,CAjB5BO,MAAAC,eAAA,CAAsBZ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Ca,MAAO,CAAA,CADoC,CAA7C,CAGAb,QAAA,CAAQ,SAAR,CAAA,CAiCAc,QAAkB,EAAG,CAyBnB,MAAO,CAAEC,eAxBTA,QAAuB,CAACZ,KAAD,CAAQ,CAC7B,GAAIK,KAAAC,QAAA,CAAcN,KAAd,CAAJ,CAA0B,CAExB,IAAK,IAAIa;AAAQ,CAAjB,CAAoBA,KAApB,CAA4Bb,KAAAc,OAA5B,CAA0CD,KAAA,EAA1C,CACEb,KAAA,CAAMa,KAAN,CAAA,CAAed,WAAA,CAAYC,KAAA,CAAMa,KAAN,CAAZ,CAEjB,OAAOb,MALiB,CAQ1B,MAAOD,YAAA,CAAYC,KAAZ,CATsB,CAwBxB,CAAkCe,cAZzCA,QAAsB,CAACL,KAAD,CAAQR,IAAR,CAAcc,IAAd,CAAoB,CACxC,IAAIC,eAAiB,CAAC,CAAA,CAAGd,oBAAA,CAAqB,SAArB,CAAJ,EAAqCD,IAArC,CAGrB,IAAIA,IAAJ,GAAae,cAAb,CAA6B,MAAOP,MAEpCM,KAAAd,KAAA,CAAUe,cAAV,CAA0BP,KAA1B,CAGA,OAAO,KATiC,CAYnC,CAzBY,CA7BrB,KAAIP,qBAE0C,CAJ1Ce,MAI0C,CAJpBvB,OAAA,CAAQ,oDAAR,CAIoB,GAFIuB,MAEGC,WAAP,CAFID,MAEJ,CAA8B,CAAE,UAF5BA,MAE0B,CAZkD;",
"sources":["node_modules/jss-camel-case/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jss_camel_case$lib$index\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","convertCase","style","converted","prop","_hyphenateStyleName2","fallbacks","Array","isArray","map","Object","defineProperty","value","camelCase","onProcessStyle","index","length","onChangeValue","rule","hyphenatedProp","_hyphenateStyleName","__esModule"]
}
