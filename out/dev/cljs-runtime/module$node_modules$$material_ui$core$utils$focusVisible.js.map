{
"version":3,
"file":"module$node_modules$$material_ui$core$utils$focusVisible.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@material-ui/core/utils/focusVisible.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$material_ui$core$utils$focusVisible\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.teardown = teardown;\nexports.useIsFocusVisible = useIsFocusVisible;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\n// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(ownerDocument) {\n  ownerDocument.addEventListener('keydown', handleKeyDown, true);\n  ownerDocument.addEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.addEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.addEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction teardown(ownerDocument) {\n  ownerDocument.removeEventListener('keydown', handleKeyDown, true);\n  ownerDocument.removeEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.removeEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.removeEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nfunction useIsFocusVisible() {\n  var ref = _react.default.useCallback(function (instance) {\n    var node = _reactDom.default.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","handleKeyDown","event","metaKey","altKey","ctrlKey","hadKeyboardEvent","handlePointerDown","handleVisibilityChange","visibilityState","hadFocusVisibleRecently","isFocusVisible","target","matches","error","type","node","tagName","inputTypesWhitelist","readOnly","isContentEditable","handleBlurVisible","window","clearTimeout","hadFocusVisibleRecentlyTimeout","setTimeout","_interopRequireDefault","Object","defineProperty","value","teardown","ownerDocument","removeEventListener","useIsFocusVisible","ref","_react","default","useCallback","instance","_reactDom","findDOMNode","addEventListener","onBlurVisible","text","search","url","tel","email","password","number","date","month","week","time","datetime"]
}
